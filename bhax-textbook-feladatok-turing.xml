<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Egy mag 100 százalékban:               
        </para>
        <programlisting language="c"><![CDATA[

int main ()
{
  for (;;){}

  return 0;
}
]]>
        </programlisting>        
    
        <para>
		Azt,hogy a megírt ciklus valóban 1 magot használ 100 százalékon egy másik terminálban top paranccsal ellenőrizhetjük. A folyamatot a Ctrl+C billentyűkombinációval lőhetjük le legegyszerűbben.
        </para>
       <para>
            Egy mag 0 százalékban:               
        </para>        
        <programlisting language="c"><![CDATA[
#include <unistd.h>
int
main ()
{
  for (;;)
    sleep(10000);
    
  return 0;
}
]]>
        </programlisting>    
	<para>
		Ha azt szeretnénk hogy egy végtelen ciklus ne használja a magot akkor "elaltathatjuk" a sleep függvénnyel mely után a zárójelben megadott szám az altatás idejét jelzi másodpercekben. Másik terminálban a top paranccsal ellenőrizhetjük hogy valóban nem használ-e egy magot sem.    
	</para>
    <para>
            Minden mag 100 százalékban.             
        </para>

        <programlisting language="c"><![CDATA[
#include <omp.h>
int
main ()
{
#pragma omp parallel
{
  for (;;);
}
  return 0;
}
]]>
        </programlisting>              
        <para>
	Ha azt szeretnénk hogy a  program több szálat használjon használhatjuk az OpenMp könyvtárat de ekkor a  fordítás a -fopenmp kapcsolóval történik. Ilyenkor a programot a parancs szerint párhuzamosan , egyszerre több szálon futtaja. A helyes működést a rendszerfigyelőben ellenőrizhetjük és ha jól működik a program láthatjuk hogy több CPU-t is használ.    
        </para>
        
    </section>       
    
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <programlisting language="c"><![CDATA[
#include<stdio.h>

int main() 
{
int a=7, b=19;
	printf("a=%d b=%d\n",a,b);

	a=(a-b);
	b=(a+b);
	a=(b-a);

	printf("a=%d b=%d\n",a,b);

return 0;

}
]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>    
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Két változó értékének felcserélését segédváltozó nélkül is könnyen megtehetjük, csupán egy kis matematika szükséges hozzá.
            Először az 'a' változót egyenlővé teszem 'a-b'-vel, majd a 'b' változót 'a+b'-vel, végül pedig az 'a' változót 'b-a'-val. Így az értékek felcserélődnek és a printf segítségével kiirathatjuk őket a terminálba.
            A % jel után pedig d betűt írunk, ezzel jelezve hogy a kiírt számok decimális, előjeles egészek lesznek.
            </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            használata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <programlisting language="c"><![CDATA[Program T1000
            
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

    for ( ;; ) {

        getmaxyx ( ablak, my , mx );

        mvprintw ( y, x, "O" );

        refresh ();
        usleep ( 100000 );

        x = x + xnov;
        y = y + ynov;

        if ( x>=mx-1 ) { // elerte-e a jobb oldalt?
            xnov = xnov * -1;
        }
        if ( x<=0 ) { // elerte-e a bal oldalt?
            xnov = xnov * -1;
        }
        if ( y<=0 ) { // elerte-e a tetejet?
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { // elerte-e a aljat?
            ynov = ynov * -1;
        }

    }

    return 0;
}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>    
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
                Ennél a vizuális feladatnál a labdánkat egy karakterrel ,a 0-val jelöljük. A feladat az hogy ha a képernyő széléhez ér a labda akkor visszapattanjon, ezért használjuk az ncurses könyvtárat,amely tartalmazza a getmaxyx-et amellyel a terminál kiterjedéseit adjuk meg.Az if feltételekkel adjuk meg a labdának azt ,hogyha elérte a terminál kiterjedését akkor pattanjon vissza.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
           <programlisting language="c"><![CDATA[Program T100

#include <time.h>
#include <stdio.h>

void
delay (unsigned long long int loops)
{
unsigned long long int i;
for (i = 0; i < loops; i++);
}

int
main (void)
{
unsigned long long int loops_per_sec = 1;
unsigned long long int ticks;

printf ("Calibrating delay loop..");
fflush (stdout);

while ((loops_per_sec <<= 1))
{
ticks = clock ();
delay (loops_per_sec);
ticks = clock () - ticks;

printf ("%llu %llu\n", ticks, loops_per_sec);

if (ticks >= CLOCKS_PER_SEC)
{
loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
(loops_per_sec / 5000) % 100);

return 0;
}
}

printf ("failed\n");
return -1;
}

            
]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>    

        <para>
            A MIPS a Million Instructions Per Secon rövidítése. Ez a számítőgép számítási sebességének a mértékegysége.
            A kernelnek szüksége van egy időzítő ciklusra, amit a processzor sebessége alapján határoz meg.Ezért a kernel megméri hogy egy bizonyos ciklus mennyi idő alatt fut le a számítógépen.
            A Bogo az angol bugus szóból ered amelynek jelentése hamis és azért adták neki ezt a nevet mert csak egy megközelítő értéket ad de nem pontos. A program futásakor az értéket a loops_per_sec változóba teszi.
    </para>
    <para>Nekem a következő eredmény jött ki 
    </para>
     <mediaobject>
            <imageobject>
                <imagedata fileref="turingbogomips.png" scale="50" />
            </imageobject>
        </mediaobject>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        
        <programlisting language="c"><![CDATA[
       #include<stdio.h>
#include<math.h>

void
kiir (double tomb[], int db)
{
  int i;

  for (i = 0; i < db; ++i)
    printf ("%f\n", tomb[i]);
}

double
tavolsag (double PR[], double PRv[], int n)
{
  double osszeg = 0.0;
  int i;

  for (i = 0; i < n; ++i)
    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

  return sqrt(osszeg);
}

int
main (void)
{

  double L[4][4] = {
    {0.0, 0.0, 1.0 / 3.0, 0.0},
    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
    {0.0, 1.0 / 2.0, 0.0, 0.0},
    {0.0, 0.0, 1.0 / 3.0, 0.0}
  };

  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

  int i, j;

  for (;;)
    {

      for (i = 0; i < 4; ++i)
	{
	  PR[i] = 0.0;
	  for (j = 0; j < 4; ++j)
	    PR[i] += (L[i][j] * PRv[j]);
	}
      if (tavolsag (PR, PRv, 4) < 0.00000001)
	break;

      for (i = 0; i < 4; ++i)
	PRv[i] = PR[i];

    }

  kiir (PR, 4);

  return 0;
}


]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>    
        <para>
       
            A Page-Rank egy olyan a Google által létrehozott program amely a weboldalakat minőségük, értékelésük
            szerint rangsorolja. Megnézi, hogy milyen weboldalról mennyi link mutat és annak
            szavazata mennyit ér. Minnél több és erősebb linkek mutatnak egy weboldalról annál jobb és fontosabb
            lesz az oldal.

        </para>
    </section>
 <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para> A Brun-tétel szerint az ikerprímek (azaz az olyan prímek melyeknek különbsége 2 és egymás után következnek) reciprokának az összege konvergál egy értékhez, melyet Brun-konstansnak nevezünk.
        </para>
        <para>
            A következő program/szimulácuó R nyelven íródott. 
        </para> 
         <programlisting language="R">
<![CDATA[
sumTwinPrimes <- function(x){
    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}
x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = sumTwinPrimes)
plot(x,y,type="b")
]]>
        </programlisting>  
        
        <para>
            A prímszámokkal való számítás miatt meghívjuk a matlab csomagot.
            Egy függvény létrehozásával kezdünk, majd a primes(x) fügvénnyel a príszámokat adjuk meg.
            A diff vektor tartalmazza azoknak a prímszámoknak a különbségét amelyek egymás után következnek.
            Az idx vektor az ikerprímeket tartalmazza.
            A t1primes és a t2 primesben vektorokban tároljuk a 2 ikerprímet.
            A returnben sum fügvénnyel visszaadjuk az eredményt.
            A plottal megrajzolva látható, hogy a számok ténylegesen egy értékhez tartanak.
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            A Monty Hall probléma arról szól hogy ha van 3 ajtóm és az egyik mögött nyeremény van akkor ha választunk egyet és a választásunk után kinyitnak egy másik ajtót amiben nem található nyeremény akkor ugyanannyi esélyünk marad e nyerni az elsőre választott ajtóval mintha megváltoztatnánk a választásunkat.   
            A  számítógépes szimuláció alapján számít, hogy másik ajtót választunk, ugyanis ekkor megduplázódik az esélyünk a nyerésre.
        </para>
        <para>
            Az első ajtó kinyitásakor 1/3 az esélye, hogy a kinyitott ajtó a nyertes  és 2/3, hogy nem az. Ezután egy üres ajtó kinyitásakor ha nem változtatunk a döntésünkön, akkor 1/3-ad marad az esélye a nyerésnek,de ha változtatunk akkor a szimuláció alapján az esélyünk 2/3-adra növekszik.
        </para>
        
        <para>Ennek bizonyítását láthatjuk R nyelven megfogalmazva, egy televíziós műsorra levetítve:</para>
         <programlisting language="R">
<![CDATA[
kiserletek_szama=1000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }
    musorvezeto[i] = mibol[sample(1:length(mibol),1)]
}
nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}
valtoztatesnyer = which(kiserlet==valtoztat)
sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
]]>
        </programlisting>  
        
        
            
        <para>
            Először meg kell adnunk az elvégezendő kísérletek számát, melyeket a for ciklusban vizsgalunk majd.
            Ezután megadjuk az ajtó számát melyet a játékos választott, majd for ciklussal vizsgáljuk ,hogy a játékos eltalálta-e elsőre a jó ajtót, ez akkor történik meg ha a kisérlet tömb első eleme megegyezik a játékos tömb első elemével. Ha a játékosnak ez sikerült, akkor a mibol vektorba beletesszük azokat az értékekekt amelyeket a játékos nem választott. Ha nem sikerült eltalálni a helyes ajtót akkor a mibol vektorba szintén 2 érték kerül, az egyik az ajtó a nyereménnyel a másik pedig az az ajtó ,ami nem nyer ,de nem is választotta a játékos.
        </para>  
        <para>A nemvaltoztatesnyer vektor tárolja majd az eseteket amikor első próbálkozásra sikerült a nyereményt  választani a játékosnak, azaz ha a kísérlet tömb eleme megegyezik a játékos elemével. A valtoztatesnyer vektorba pedig megkapjuk azokat az eseteket amikor a játékos változtatással nyert.
         Eztuán a lenght-el kiiratjuk az esetek számait.  
   </para>
   
    </section>

</chapter> 
